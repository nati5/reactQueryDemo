export default CarmelValidate;
declare namespace CarmelValidate {
    function isObject(item: any): boolean;
    function isObject(item: any): boolean;
    function mergeDeep(target: any, source: any): any;
    function mergeDeep(target: any, source: any): any;
    function runValidate(data: any, rules?: any, whitelist?: any, depth?: number): any;
    function runValidate(data: any, rules?: any, whitelist?: any, depth?: number): any;
    function createDefaultRules(data: any, rules: any, depth: any, originPath?: string): any;
    function createDefaultRules(data: any, rules: any, depth: any, originPath?: string): any;
    function ValidateVar(data: any, rule: any): any;
    function ValidateVar(data: any, rule: any): any;
    function getObjectRules(data: any, rules: any, depth?: number, originKey?: string): any;
    function getObjectRules(data: any, rules: any, depth?: number, originKey?: string): any;
    function getArrayRules(data: any, rules: any, depth: any): {
        length: {
            minimum: number;
            maximum: number;
        };
    };
    function getArrayRules(data: any, rules: any, depth: any): {
        length: {
            minimum: number;
            maximum: number;
        };
    };
    function getDateRules(): void;
    function getDateRules(): void;
    function getStringRules(rule?: {}, originPath?: string): any;
    function getStringRules(rule?: {}, originPath?: string): any;
    function getNumberRules(rule?: any): any;
    function getNumberRules(rule?: any): any;
    namespace originRules {
        namespace array {
            namespace range {
                const min: number;
                const max: number;
            }
        }
        namespace object {
            const maximum: number;
        }
        namespace number {
            export namespace range_1 {
                const min_1: number;
                export { min_1 as min };
                const max_1: number;
                export { max_1 as max };
            }
            export { range_1 as range };
        }
        namespace string {
            namespace format {
                const pattern: string;
                const flags: string;
                const message: string;
            }
            namespace length {
                const maximum_1: number;
                export { maximum_1 as maximum };
            }
        }
        namespace password {
            export namespace format_1 {
                const pattern_1: string;
                export { pattern_1 as pattern };
                const message_1: string;
                export { message_1 as message };
            }
            export { format_1 as format };
            export namespace length_1 {
                const maximum_2: number;
                export { maximum_2 as maximum };
            }
            export { length_1 as length };
        }
    }
    namespace rulesWhitelist {
        export const earliest: boolean;
        export const latest: boolean;
        export const dateOnly: boolean;
        export const equality: boolean;
        export const email: boolean;
        const length_2: boolean;
        export { length_2 as length };
        export const exclusion: boolean;
        export const inclusion: boolean;
        const message_2: boolean;
        export { message_2 as message };
        const format_2: boolean;
        export { format_2 as format };
        export const numericality: boolean;
        export const presence: boolean;
        export const type: boolean;
        export const url: boolean;
    }
}
