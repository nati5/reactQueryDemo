import { useState, useRef, useEffect } from 'react';
import useCallbackOnce from './useCallbackOnce';
var useAsyncState = (function (initialState) {
    var _a = useState(initialState), state = _a[0], setState = _a[1];
    var resolveRef = useRef(null);
    var callbackRef = useRef(null);
    var setAsyncState = useCallbackOnce(function (value, callback) {
        resolveRef.current = null;
        callbackRef.current = null;
        return new Promise(function (resolve) {
            resolveRef.current = resolve;
            if (callback)
                callbackRef.current = callback;
            setState(function (prevState) {
                var newState = value instanceof Function ? value(prevState) : value;
                if (prevState === newState) {
                    resolveRef.current = null;
                    callbackRef.current = null;
                    resolve(newState);
                    callback && callback(newState);
                }
                return newState;
            });
        });
    });
    var getState = useCallbackOnce(function () {
        return new Promise(function (resolve) {
            setState(function (state) {
                resolve(state);
                return state;
            });
        });
    });
    useEffect(function () {
        resolveRef.current && resolveRef.current(state);
        callbackRef.current && callbackRef.current(state);
    }, [state]);
    return [state, setAsyncState, getState];
});
export default useAsyncState;
//# sourceMappingURL=useAsyncState.js.map