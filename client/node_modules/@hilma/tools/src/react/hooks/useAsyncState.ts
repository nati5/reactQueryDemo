import { useState, useRef, useEffect } from 'react';

import { UseAsyncStateType } from '../../types';

import useCallbackOnce from './useCallbackOnce';

const useAsyncState: UseAsyncStateType = (<S>(initialState: S) => {
	const [state, setState] = useState(initialState);

	const resolveRef = useRef<((state: S) => void) | null>(null);
	const callbackRef = useRef<((state: S) => void) | null>(null);

	const setAsyncState = useCallbackOnce((value: React.SetStateAction<S>, callback?: (state: S) => void) => {
		resolveRef.current = null;
		callbackRef.current = null;

		return new Promise<S>(resolve => {
			resolveRef.current = resolve;
			if (callback) callbackRef.current = callback;

			setState(prevState => {
				const newState = value instanceof Function ? value(prevState) : value;

				if (prevState === newState) {
					resolveRef.current = null;
					callbackRef.current = null;
					resolve(newState);
					callback && callback(newState);
				}

				return newState;
			});
		});
	});

	const getState = useCallbackOnce(() => {
		return new Promise<S>(resolve => {
			setState(state => {
				resolve(state);
				return state;
			})
		});
	});

	useEffect(() => {
		resolveRef.current && resolveRef.current(state);
		callbackRef.current && callbackRef.current(state);
	}, [state]);

	return [state, setAsyncState, getState];
}) as UseAsyncStateType;

export default useAsyncState;