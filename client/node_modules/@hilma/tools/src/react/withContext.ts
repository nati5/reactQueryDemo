import { createElement, useContext } from 'react';

import getDisplayName from './getDisplayName';

type MapContextToProps<T> = {
	[P in keyof T]: React.Context<T[P]>;
}

const withContext = <T>(mapContextToProps: MapContextToProps<T>) => <P extends T>(component: React.ComponentType<P>) => (Object.entries(mapContextToProps) as [string, React.Context<any>][]).reduceRight((component: React.ComponentType<P>, [key, Context]) => {

	const WithContext: React.FC<P> = props => {
		const value = useContext(Context);
		return createElement(component, { ...props as P, [key]: value });
	};

	WithContext.displayName = `withContext(${getDisplayName(component)})`;

	return WithContext;
}, component);

export default withContext;
