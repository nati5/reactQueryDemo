import * as React from "react";
import { Component, Providers, Element } from "../types";
import { isRenderable } from "./isRenderable";


export function wrap<T extends Array<{ [key: string]: any }>>(
	...parents: Providers<T>
) {
	/**
	 * @param child The child to wrap with the parents. Either a component or an element.
	 * @param props The props to pass to the child, if it's a component.
	 *
	 * @example
	 * // writing
	 * wrap(Wrapper)(Component, {otherProp: "hello"})
	 *
	 * // is the same as writing
	 * <Wrapper>
	 *   <Component otherProp="hello" />
	 * </Wrapper>
	 */
	return function <C extends {}>(child: Component<C> | Element, props?: C) {
		return parents.reduceRight(
			(acc, cur) => {
				if (cur instanceof Array) {
					return React.createElement(cur[0], cur[1], acc);
				}

				return React.createElement(cur, null, acc);
			},
			isRenderable(child) ? child : React.createElement(child, props)
		);
	};
}
export default wrap;
