
import { Component, Providers } from '../types';
import wrap from './wrap';

/**
 * Takes parents, wraps them with a child, and returns a functional component
 * where the child is wrapped with the parents and the child can be passed props.
 *
 * @param parents The parents to wrap the child in, from outer to inner,
 * either as just the component or a tuple of the component and its props.
 * Must be able to take a `children` prop.
 *
 * @example
 * // writing
 * const Component = provide(OuterWrapper, [InnerWrapper, {otherProp: "Hello"}])(App)
 *
 * // is the same as writing
 * const Component: React.FC<AppProps> = (props) => {
 *    return (
 *      <OuterWrapper>
 *        <InnerWrapper otherProp="Hello">
 *          <App {...props} />
 *        </InnerWrapper>
 *      </OuterWrapper>
 *    );
 * }
 */
export function provide<T extends Array<{ [key: string]: any }>>(
	...parents: Providers<T>
) {
	/**
	 * @param child The child to wrap with the parents.
	 */
	return function <C extends {}>(child: Component<C>): React.FC<C> {
		return function (props) {
			return wrap(...parents)(child, props);
		};
	};
}


export default provide;