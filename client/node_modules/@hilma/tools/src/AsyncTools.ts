const AsyncTools = {
	async to<T>(promise: Promise<T>): Promise<[any, null] | [null, T]> {
		try {
			const data = await promise;
			return [null, data];
		} catch (error) {
			return [error, null];
		}
	},

	async parseJSON(response: Response) {
		try {
			const json = await response.json();
			return { status: response.status, ok: response.ok, json };
		} catch (error) {
			if (response.status === 204 || response.status === 201) return { status: response.status, ok: response.ok, json: { ok: response.ok } };
			throw error;
		}
	},

	async fetch(input: RequestInfo, init?: RequestInit | undefined): Promise<any> {
		const response = await fetch(input, init);
		const data = await this.parseJSON(response);
		if (data.ok) return data.json;
		throw data.json;
	},

	async superFetch(input: RequestInfo, init?: RequestInit | undefined): Promise<[any, any]> {
		const [error, data] = await this.to(this.fetch(input, init));
		return [data, error];
	}
}

export default AsyncTools;